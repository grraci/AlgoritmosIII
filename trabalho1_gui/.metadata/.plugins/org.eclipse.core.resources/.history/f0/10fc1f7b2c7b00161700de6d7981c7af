package estruturas;

import java.util.Scanner;

import algoritmos.AvaliadorRPN;
import algoritmos.InfixPosFixConverter;
import algoritmos.InvalidOperator;

public class Node<T extends Comparable<T>> implements Comparable<Node<T>> {
	
	public T data;
	private Node<T> next;
	private Node<T> prev;
	public OrderedList<String> ol;
	public ExpressionEvaluator expression;
	private String calc;
	
	public Node(){	
		setData(null);
		setNext(null);
	}
	
	public Node(T data){
		ol = new OrderedList<>();
		this.setData(data);
		this.setNext(null);
	}

	public T getData() {
		return data;
	}
	
	public void setData(T data) {
		this.data = data;
	}
	
	public Node<T> getNext() {
		return next;
	}
	
	public void setNext(Node<T> next) {
		this.next = next;
	}
	
	public Node<T> getPrev() {
		return prev;
	}
	
	public void setPrev(Node<T> prev) {
		this.prev = prev;
	}
	
	public String getCalc() {
		return calc;
	}
	
	public void setCalc(String calc) {
		this.calc = calc;
	}

	public String toString(){
		String[] exp = this.calc.split(" ");
		String cellCoord   = "[a-zA-Z][a-zA-z]*[0-9]+";
		
		for(String x : exp){
			if(x.matches(cellCoord)){
			System.out.println(x);
			}
		}
		exp[1] = "2";
		
		System.out.println(exp);
		StringBuilder tmp = new StringBuilder();
		InfixPosFixConverter converter = new InfixPosFixConverter();
		try {
			tmp.append(AvaliadorRPN.avalia(converter.toPeek(this.calc).replaceAll("\\B", " ")));
		} catch (PilhaCheia | PilhaVazia | InvalidOperator e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return tmp.toString();
	}
	
	@Override
	public int compareTo(Node<T> nodo) {
		return data.compareTo(nodo.getData());
	}

}